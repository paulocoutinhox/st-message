{"version":3,"sources":["stChat.tsx","index.tsx"],"names":["Chat","componentDidUpdate","Streamlit","setFrameHeight","componentDidMount","render","avatarUrl","props","args","isUser","isPicture","isAudio","avatarStyle","seed","message","answers","startsWith","theme","Avatar","styled","img","border","borderRadius","height","width","margin","Message","div","display","background","secondaryBackgroundColor","padding","maxWidth","css","AnswerBubble","marginBottom","marginRight","opacity","MessageDiv","fontFamily","font","flexFlow","Img","maxHeight","BubbleImg","audio","marginLeft","messages","Array","isArray","map","m","i","msg","onLoad","key","src","controls","alt","draggable","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05991a4b.chunk.js","sourcesContent":["import {\n  StreamlitComponentBase,\n  withStreamlitConnection,\n  Streamlit\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/react'\nimport ReactAudioPlayer from 'react-audio-player';\n\n\n\nclass Chat extends StreamlitComponentBase {\n  public componentDidUpdate = () => {\n    Streamlit.setFrameHeight()\n  }\n\n  public componentDidMount = () => {\n    Streamlit.setFrameHeight()\n  }\n\n  public render = (): ReactNode => {\n    const { isUser, isPicture, isAudio, avatarStyle, seed, message, answers } = this.props.args;\n\n    let avatarUrl\n    if (avatarStyle.startsWith(\"data:image\")) {\n      avatarUrl = avatarStyle\n    } else {\n      avatarUrl = `https://avatars.dicebear.com/api/${avatarStyle}/${seed}.svg`\n    }\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (!theme) {\n      return <div>Theme is undefined, please check streamlit version.</div>\n    }\n\n    // styles for the avatar image\n    const Avatar = styled.img({\n      border: `1px solid transparent`,\n      borderRadius: '50%',\n      height: '2.5rem',\n      width: '2.5rem',\n      margin: 0\n    })\n\n    // styles for the message box\n    const Message = styled.div({\n      display: 'block',\n      background: theme.secondaryBackgroundColor,\n      border: '1px solid transparent',\n      borderRadius: '1px 10px 10px 1px',\n      padding: '10px 14px',\n      margin: '1px 5px',\n      maxWidth: '70%',\n      width: 'fit-content',\n    }, (props: { isUser: boolean }) => {\n      return css`\n        &:first-child {\n          border-radius: ${props.isUser ? '10px 1px 1px 10px' : '1px 10px 10px 1px'};\n        }\n        &:last-child {\n          border-radius: ${props.isUser ? '10px 1px 10px 10px' : '1px 10px 10px 10px'};\n        }\n        & * {\n          max-width: 100%;\n        }\n      `\n    })\n\n    const AnswerBubble = styled.div({\n      display: 'block',\n      background: theme.secondaryBackgroundColor,\n      border: '1px solid transparent',\n      borderRadius: '10px 10px 10px 10px',\n      padding: '10px 14px',\n      margin: '1px 5px',\n      maxWidth: '70%',\n      width: 'fit-content',\n      marginBottom: '-10px',\n      marginRight: '10px !important',\n      opacity: '0.5'\n    }, () => {\n      return css`\n        & * {\n          max-width: 100%;\n        }\n      `\n    })\n\n    const MessageDiv = styled.div({\n      width: '100%',\n    }, (props: {isUser: boolean}) => {\n      if (props.isUser) {\n        return css`\n          & div {\n            margin-left: auto;\n            margin-right: 0;\n          }\n        `\n      }\n      return css``\n    })\n\n    // styles for the container\n    const Chat = styled.div({\n      fontFamily: `${theme.font}, 'Segoe UI', 'Roboto', sans-serif`, \n      height: 'auto',\n      margin: 0,\n      width: '100%',\n      flexFlow: 'column'\n    }, \n    (props: {isUser: boolean}) => {  // specific styles\n      if (props.isUser){\n        return css`\n          text-align: right;\n        `\n      }\n      return css``\n    })\n\n    const Img = styled.img({\n      maxWidth: '70%',\n      maxHeight: '350px',\n      display: 'block',\n      borderRadius: '1px 10px 10px 1px',\n      margin: '1px 5px'\n    }, (props: { isUser: boolean }) => {\n      return css`\n        ${props.isUser ? 'margin-left: auto;' : 'margin-right: auto;'}\n        &:first-child {\n          border-radius: ${props.isUser ? '10px 1px 1px 10px' : '1px 10px 10px 1px'};\n        }\n        &:last-child {\n          border-radius: ${props.isUser ? '10px 1px 10px 10px' : '1px 10px 10px 10px'};\n        }\n      `\n    })\n\n    const Audio = styled.audio({\n      display: 'block',\n      width: '100%',\n      height: 'auto',\n      margin: '1px 5px'\n    }, (props: { isUser: boolean }) => {\n      return css`\n        ${props.isUser ? 'margin-left: auto;' : 'margin-right: auto;'}\n        &:first-child {\n          border-radius: ${props.isUser ? '10px 1px 1px 10px' : '1px 10px 10px 1px'};\n        }\n        &:last-child {\n          border-radius: ${props.isUser ? '10px 1px 10px 10px' : '1px 10px 10px 10px'};\n        }\n      `\n    })\n\n    const BubbleImg = styled.img({\n      maxWidth: '70%',\n      maxHeight: '350px',\n      display: 'block',\n      borderRadius: '10px 10px 10px 10px',\n      margin: '1px 5px',\n      marginBottom: '-10px',\n      marginRight: '10px !important',\n      opacity: '0.6',\n      marginLeft: 'auto'\n    })\n\n    // The message variable could be an array of strings or a single string.\n    // If it's an array, we'll render each element as a separate message.\n    // If it's a string, we'll render it as a single message.\n    let messages: ReactNode[] | ReactNode = []\n\n    if (Array.isArray(message)) {\n      messages = message.map((m: string, i: number) => {\n        let msg\n        if (isPicture[i]) {\n          msg = <Img onLoad={() => Streamlit.setFrameHeight()} key={i} src={m} isUser={isUser} />\n        } else if (isAudio[i]) {\n          //msg = <Audio onLoad={() => Streamlit.setFrameHeight()} key={i} src={m} isUser={isUser} controls />\n          msg = <ReactAudioPlayer key={i} src={m} controls />\n        } else {\n          msg = <Message isUser={isUser} key={i}>{m}</Message>\n        }\n\n        if (answers != null && i in answers) {\n          let replied_to\n          // TODO: this is not safe at all\n          if (!answers[i].startsWith(\"data:image/jpeg;base64\")) {\n            replied_to = <AnswerBubble key={\"answers\" + i}>{answers[i]}</AnswerBubble>\n          } else {\n            replied_to = <BubbleImg onLoad={() => Streamlit.setFrameHeight()} key={\"bubble_image\" + i} src={answers[i]} />\n          }\n\n          msg = [\n            replied_to,\n            msg\n          ]\n        }\n\n        return msg\n      })\n    } else {\n      if (isPicture) {\n        messages = <Img onLoad={() => Streamlit.setFrameHeight()} src={message} isUser={isUser} key=\"0\" />\n      } else if (isAudio) {\n        //messages = <Audio onLoad={() => Streamlit.setFrameHeight()} src={message} isUser={isUser} key=\"0\" controls />\n        messages = <ReactAudioPlayer key={0} src={message} controls />\n      } else {\n        messages = <Message isUser={isUser} key=\"0\">{message}</Message>\n      }\n    }\n\n    return (\n      <Chat isUser={isUser}>\n        <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\n        <MessageDiv isUser={isUser}>\n          {messages}\n        </MessageDiv>\n      </Chat>\n    )\n  }\n}\n\nexport default withStreamlitConnection(Chat);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Chat from \"./stChat\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Chat />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}